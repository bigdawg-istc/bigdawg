<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>istc.bigdawg</groupId>
	<artifactId>istc.bigdawg</artifactId>
	<packaging>jar</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>istc.bigdawg</name>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.glassfish.jersey</groupId>
				<artifactId>jersey-bom</artifactId>
				<version>${jersey.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-grizzly2-http</artifactId>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-moxy</artifactId>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-jackson</artifactId>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-resources-plugin</artifactId>
			<version>2.4.3</version>
		</dependency>

		<!-- PostgreSQL client -->
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.1-901-1.jdbc4</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>6.0.5</version>
		</dependency>

		<!-- Vertica JDBC -->
		<dependency>
			<groupId>com.vertica</groupId>
			<artifactId>vjdbc8</artifactId>
			<version>8.0.1</version>
		</dependency>

		<!-- SQL parsing library -->
		<dependency>
			<groupId>com.github.jsqlparser</groupId>
			<artifactId>jsqlparser</artifactId>
			<version>0.9.4</version>
		</dependency>

		<!-- Log4j -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

		<dependency>
			<groupId>com.jcabi</groupId>
			<artifactId>jcabi-log</artifactId>
			<version>0.17.1</version>
		</dependency>

		<!-- Accumulo -->
		<dependency>
			<groupId>org.apache.accumulo</groupId>
			<artifactId>accumulo-core</artifactId>
			<version>1.7.0</version>
		</dependency>

		<!-- To handle JSON objects -->
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>

		<!-- for HTTP, e.g. status codes -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5</version>
		</dependency>

		<!-- for Query Execution Plan graph -->
		<dependency>
			<groupId>org.jgrapht</groupId>
			<artifactId>jgrapht-core</artifactId>
			<version>0.9.1</version>
		</dependency>

		<!-- for Lambda exception handling -->
		<dependency>
			<groupId>com.diffplug.durian</groupId>
			<artifactId>durian</artifactId>
			<version>2.0</version>
		</dependency>

		<!-- For: org.jcp.xml.dsig.internal.dom.Utils -->
		<dependency>
			<groupId>org.apache.santuario</groupId>
			<artifactId>xmlsec</artifactId>
			<version>1.5.1</version>
		</dependency>

		<dependency>
			<groupId>org.scidb.jdbc</groupId>
			<artifactId>scidb</artifactId>
			<version>1.0</version>
<!-- 			<scope>system</scope> -->
<!-- 			<systemPath>${project.basedir}/src/main/resources/scidb4j.jar</systemPath> -->
		</dependency>


		<!-- For scidb4j : it requires java 1.6 <dependency> <groupId>org.scidb</groupId> 
			<artifactId>jdbc</artifactId> <version>1.0</version> </dependency> -->

		<!-- For SciDB jar. -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>2.4.1</version>
		</dependency>


		<!-- For Neo4J graph database -->
		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j-jdbc</artifactId>
			<version>2.3.2</version>
		</dependency>

		<!-- For file and in-memory support, add these two as well -->
		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j</artifactId>
			<version>2.3.2</version>
		</dependency>
		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j-kernel</artifactId>
			<version>2.3.2</version>
			<type>test-jar</type>
		</dependency>
		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j-io</artifactId>
			<version>2.3.2</version>
			<type>test-jar</type>
		</dependency>


		<!-- JeroMQ Pure Java implementation of libzmq (https://github.com/zeromq/jeromq) -->
		<dependency>
			<groupId>org.zeromq</groupId>
			<artifactId>jeromq</artifactId>
			<version>0.3.5</version>
			<!-- More recent <version>0.3.4</version> -->
		</dependency>
		<!-- Java binding for 0MQ (http://www.zeromq.org) -->
		<dependency>
			<groupId>org.zeromq</groupId>
			<artifactId>jzmq</artifactId>
			<version>3.1.0</version>
			<!-- More recent <version>3.0.1</version> -->
		</dependency>
		
		<!-- http://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper -->
		<dependency>
		    <groupId>org.apache.zookeeper</groupId>
		    <artifactId>zookeeper</artifactId>
		    <version>3.4.6</version>
		    <type>pom</type>
		</dependency>

		<!-- http://mvnrepository.com/artifact/commons-codec/commons-codec -->
		<dependency>
		    <groupId>commons-codec</groupId>
		    <artifactId>commons-codec</artifactId>
		    <version>1.5</version>
		    <type>pom</type>
		</dependency>

		<!-- http://mvnrepository.com/artifact/commons-collections/commons-collections -->
		<dependency>
		    <groupId>commons-collections</groupId>
		    <artifactId>commons-collections</artifactId>
		    <version>3.2.1</version>
		    <type>pom</type>
		</dependency>

		<!-- http://mvnrepository.com/artifact/commons-configuration/commons-configuration -->
		<dependency>
		    <groupId>commons-configuration</groupId>
		    <artifactId>commons-configuration</artifactId>
		    <version>1.6</version>
		    <type>pom</type>
		</dependency>

		<!-- http://mvnrepository.com/artifact/commons-logging/commons-logging -->
		<dependency>
		    <groupId>commons-logging</groupId>
		    <artifactId>commons-logging</artifactId>
		    <version>1.1.1</version>
		    <type>pom</type>
		</dependency>

		<!-- http://mvnrepository.com/artifact/commons-pool/commons-pool -->
		<dependency>
		    <groupId>commons-pool</groupId>
		    <artifactId>commons-pool</artifactId>
		    <version>1.5.5</version>
		    <type>pom</type>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.google.gdata/core -->
		<dependency>
		    <groupId>com.google.gdata</groupId>
		    <artifactId>core</artifactId>
		    <version>1.47.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/jfree/jcommon -->
		<dependency>
		    <groupId>jfree</groupId>
		    <artifactId>jcommon</artifactId>
		    <version>1.0.16</version>
		</dependency>

		<dependency>
			<groupId>edu.brown</groupId>
			<artifactId>sstore-jdbc</artifactId>
			<version>0.1</version>

 		<!-- 	<scope>system</scope> 
 			<systemPath>${project.basedir}/src/main/resources/mvn-repo/org/sstore/jdbc/sstore.jar</systemPath>
-->
		</dependency>
		
 		<dependency>
		    <groupId>at.uni-salzburg.dbresearch</groupId>
		    <artifactId>apted</artifactId>
		    <version>1.0</version>
		</dependency>
	</dependencies>

	<repositories>
		<repository>
    		<id>in-project</id>
    		<name>in-project-maven-repository</name>
    		<url>file://${project.basedir}/src/main/resources/mvn-repo/</url>
		</repository>
		<repository>
			<id>maven</id>
			<name>maven-repo</name>	
			<url>http://central.maven.org/maven2/</url>
		</repository>
		<repository>
			<id>neo4j-public</id>
			<url>http://m2.neo4j.org/content/groups/public</url>
		</repository>
	</repositories>

	<!-- Profiles configuration -->
	<!-- Each profile has its own definition of resource, in this case configuration 
		files. For the dev profile the configuration files are stored in the target/classes 
		folder, whereas for the prod and test environments the configuration files 
		are stored in an external folder (bigdawg-conf/) which is external to the 
		final jar file. Thanks to this the application can be easily configured. -->
	<profiles>
		<!-- The configuration of the development profile -->
		<profile>
			<id>dev</id>
			<!-- The development profile is active by default -->
			<activation>
				<property>
					<name>environment.type</name>
					<value>dev</value>
				</property>
			</activation>
			<properties>
				<!-- Specifies the build.profile.id property that must be equal than 
					the name of the directory that contains the profile specific configuration 
					file. Because the name of the directory that contains the configuration file 
					of the development profile is dev, we must set the value of the build.profile.id 
					property to dev. -->
				<build.profile.id>dev</build.profile.id>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<!-- filtering - replaces variables, denoted by the ${...} with values -->
						<filtering>true</filtering>
						<includes>
							<include>**/*.properties</include>
							<!-- <include>*.jar</include> -->
						</includes>
					</resource>
				</resources>
			</build>
		</profile>
		<!-- The configuration of the production profile -->
		<profile>
			<id>prod</id>
			<activation>
				<property>
					<name>environment.type</name>
					<value>prod</value>
				</property>
			</activation>
			<properties>
				<!-- Specifies the build.profile.id property that must be equal than 
					the name of the directory that contains the profile specific configuration 
					file. Because the name of the directory that contains the configuration file 
					of the production profile is prod, we must set the value of the build.profile.id 
					property to prod. -->
				<build.profile.id>prod</build.profile.id>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<!-- ${project.build.directory} refers to the output directory of the 
							project -->
						<targetPath>${project.build.directory}/bigdawg-conf/</targetPath>
						<!-- filtering - replaces variables, denoted by the ${...} with values -->
						<filtering>true</filtering>
						<includes>
							<include>*.properties</include>
						</includes>
						<!-- <targetPath>${project.build.directory}</targetPath> -->
						<!-- <includes> <include>log4j.properties</include> </includes> -->
					</resource>
				</resources>
			</build>
		</profile>
		<!-- The configuration of the testing profile -->
		<profile>
			<id>test</id>
			<activation>
				<property>
					<name>environment.type</name>
					<value>test</value>
				</property>
			</activation>
			<properties>
				<!-- Specifies the build.profile.id property that must be equal than 
					the name of the directory that contains the profile specific configuration 
					file. Because the name of the directory that contains the configuration file 
					of the testing profile is test, we must set the value of the build.profile.id 
					property to test. -->
				<build.profile.id>test</build.profile.id>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<!-- ${project.build.directory} refers to the output directory of the 
							project -->
						<targetPath>${project.build.directory}/bigdawg-conf/</targetPath>
						<!-- filtering - replaces variables, denoted by the ${...} with values -->
						<filtering>true</filtering>
						<includes>
							<include>*.properties</include>
						</includes>
						<!-- <targetPath>${project.build.directory}</targetPath> -->
						<!-- <includes> <include>log4j.properties</include> </includes> -->
					</resource>
				</resources>
			</build>
		</profile>
		<!-- The configuration of the testing profile -->
		<profile>
			<id>mit</id>
			<activation>
				<property>
					<name>environment.type</name>
					<value>mit</value>
				</property>
			</activation>
			<properties>
				<!-- Specifies the build.profile.id property that must be equal than 
					the name of the directory that contains the profile specific configuration 
					file. Because the name of the directory that contains the configuration file 
					of the testing profile is test, we must set the value of the build.profile.id 
					property to test. -->
				<build.profile.id>mit</build.profile.id>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<!-- ${project.build.directory} refers to the output directory of the 
							project -->
						<!-- <targetPath>${project.build.directory}/bigdawg-conf/</targetPath> -->
						<!-- filtering - replaces variables, denoted by the ${...} with values -->
						<filtering>true</filtering>
						<includes>
							<include>**/*.properties</include>
						</includes>
						<!-- <targetPath>${project.build.directory}</targetPath> -->
						<!-- <includes> <include>log4j.properties</include> </includes> -->
					</resource>
				</resources>
			</build>
		</profile>
		<!-- The configuration of the testing profile -->
		<profile>
			<id>mit-debug</id>
			<activation>
				<property>
					<name>environment.type</name>
					<value>mit-debug</value>
				</property>
			</activation>
			<properties>
				<!-- Specifies the build.profile.id property that must be equal than
					the name of the directory that contains the profile specific configuration
					file. Because the name of the directory that contains the configuration file
					of the testing profile is test, we must set the value of the build.profile.id
					property to test. -->
				<build.profile.id>mit-debug</build.profile.id>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<!-- ${project.build.directory} refers to the output directory of the
							project -->
						<!-- <targetPath>${project.build.directory}/bigdawg-conf/</targetPath> -->
						<!-- filtering - replaces variables, denoted by the ${...} with values -->
						<filtering>true</filtering>
						<includes>
							<include>**/*.properties</include>
						</includes>
						<!-- <targetPath>${project.build.directory}</targetPath> -->
						<!-- <includes> <include>log4j.properties</include> </includes> -->
					</resource>
				</resources>
			</build>
		</profile>
		<profile>
			<id>localhost</id>
			<activation>
				<property>
					<name>environment.type</name>
					<value>localhost</value>
				</property>
			</activation>
			<properties>
				<!-- Specifies the build.profile.id property that must be equal than
					the name of the directory that contains the profile specific configuration
					file. Because the name of the directory that contains the configuration file
					of the testing profile is test, we must set the value of the build.profile.id
					property to test. -->
				<build.profile.id>localhost</build.profile.id>
			</properties>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<!-- ${project.build.directory} refers to the output directory of the
							project -->
						<!-- <targetPath>${project.build.directory}/bigdawg-conf/</targetPath> -->
						<!-- filtering - replaces variables, denoted by the ${...} with values -->
						<filtering>true</filtering>
						<includes>
							<include>**/*.properties</include>
						</includes>
						<!-- <targetPath>${project.build.directory}</targetPath> -->
						<!-- <includes> <include>log4j.properties</include> </includes> -->
					</resource>
				</resources>
			</build>
		</profile>
	</profiles>

	<build>
		<filters>
			<!-- Ensures that the config.properties file is always loaded from the 
				configuration directory of the active Maven profile. -->
			<filter>profiles/${build.profile.id}/${build.profile.id}-config.properties</filter>
		</filters>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<inherited>true</inherited>
				<!-- source and target of the java compiler -->
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<goals>
							<goal>java</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<mainClass>${bigDawg.main.class}</mainClass>
				</configuration>
			</plugin>

			<plugin>
				<!-- NOTE: We don't need a groupId specification because the group is 
					org.apache.maven.plugins ...which is assumed by default. -->
				<artifactId>maven-assembly-plugin</artifactId>
				<!-- type: mvn package -P <your-profile> -->
				<version>2.5.5</version>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<archive>
						<manifest>
							<mainClass>${bigDawg.main.class}</mainClass>
						</manifest>
					</archive>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id> <!-- this is used for inheritance merges -->
						<phase>package</phase> <!-- bind to the packaging phase -->
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<properties>
		<!-- version 2.19 of jersey is for java 1.7; only until version 2.6, jersey 
			was compiled with Java SE 6 -->
		<jersey.version>2.19</jersey.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<bigDawg.main.class>istc.bigdawg.Main</bigDawg.main.class>
		<!-- <bigDawg.main.class>istc.bigdawg.sstore.JDBCExample</bigDawg.main.class> -->
		<!-- <bigDawg.main.class>istc.bigdawg.accumulo.DataLoader</bigDawg.main.class> -->
		<!-- <bigDawg.main.class>istc.bigdawg.migration.TestTpchPostgresAccumulo</bigDawg.main.class> -->
		<!-- <bigDawg.main.class>istc.bigdawg.migration.FromPostgresToPostgres</bigDawg.main.class> -->
		<!-- <bigDawg.main.class>istc.bigdawg.migration.FromSStoreToPostgres</bigDawg.main.class> -->
		<!--<bigDawg.main.class>istc.bigdawg.accumulo.DataLoader</bigDawg.main.class> -->
	</properties>


</project>
